# Original idea by @ISnackable. Many thanks to him for handling the most hardest parts!
# https://github.com/ISnackable/CercubePlus/blob/main/.github/workflows/Build.yml

# Required GitHub Secrets for MinIO S3 upload:
# - MINIO_ACCESS_KEY: Your MinIO access key
# - MINIO_SECRET_KEY: Your MinIO secret key  
# - MINIO_ENDPOINT_URL: Your MinIO server endpoint (e.g., https://minio.example.com)
# - MINIO_BUCKET_NAME: The S3 bucket name to upload to

name: Build and Release YTLitePlus

on:
  workflow_dispatch:
    inputs:
      sdk_version:
        description: "iOS SDK Version"
        default: "17.5"
        required: true
        type: string
      s3_ipa_path:
        description: "S3 path to download IPA from (e.g., releases/YouTube_19.01.2_5.0.1/YTLitePlus_19.01.2_5.0.1.ipa)"
        default: ""
        required: true
        type: string
      bundle_id:
        description: "Modify the bundle ID"
        default: "com.google.ios.youtube"
        required: true
        type: string
      app_name:
        description: "Modify the app name"
        default: "YouTube"
        required: true
        type: string
      commit_id:
        description: "(Optional) Commit ID to build at"
        default: ""
        required: false
        type: string
      upload_artifact:
        description: "Upload iPA as artifact (Public)"
        default: true
        required: false
        type: boolean
      upload_to_s3:
        description: "Upload iPA to MinIO S3"
        default: false
        required: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build YTLitePlus
    runs-on: macos-13
    permissions:
      contents: write

    steps:
      - name: Checkout Main
        uses: actions/checkout@v4
        with:
          path: main
          ref: ${{ github.event.inputs.commit_id || github.ref }}
          submodules: recursive

      - name: Install Dependencies
        run: brew install ldid dpkg make

      - name: Download Theos
        uses: actions/checkout@v4
        with:
          repository: theos/theos
          ref: master
          path: theos
          submodules: recursive

      - name: iOS SDK Caching
        id: SDK
        uses: actions/cache@v4
        env:
          cache-name: iOS-${{ inputs.sdk_version }}-SDK
        with:
          path: theos/sdks/
          key: ${{ env.cache-name }}
          restore-keys: ${{ env.cache-name }}

      - name: Download iOS SDK
        if: steps.SDK.outputs.cache-hit != 'true'
        run: |
          # Only download the specific SDK version
          git clone -n --depth=1 --filter=tree:0 https://github.com/aricloverALT/sdks/
          cd sdks
          git sparse-checkout set --no-cone iPhoneOS${{ inputs.sdk_version }}.sdk
          git checkout
          mv *.sdk $THEOS/sdks
        env:
          THEOS: ${{ github.workspace }}/theos

      - name: Download Theos Jailed
        uses: actions/checkout@v4
        with:
          repository: qnblackcat/theos-jailed
          ref: master
          path: theos-jailed
          submodules: recursive

      - name: Install Theos Jailed
        run: |
          ./theos-jailed/install
        env:
          THEOS: ${{ github.workspace }}/theos
        
      - name: Fix Compiling
        run: |
          # Update GNU Make to allow for faster building
          echo "$(brew --prefix make)/libexec/gnubin" >> $GITHUB_PATH
          (echo export PATH="/usr/local/opt/make/libexec/gnubin:$PATH" >> ~/.bash_profile)
          source ~/.bash_profile

      - name: Configure AWS CLI for MinIO
        run: |
          pip install awscli
          aws configure set aws_access_key_id ${{ secrets.MINIO_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.MINIO_SECRET_KEY }}
          aws configure set default.region us-east-1
          aws configure set default.output json

      - name: Prepare YouTube iPA
        run: |
          # Download IPA from MinIO S3
          echo "Downloading IPA from MinIO S3..."
          aws s3 cp "s3://${{ secrets.MINIO_BUCKET_NAME }}/${{ inputs.s3_ipa_path }}" \
            main/YouTube.ipa \
            --endpoint-url ${{ secrets.MINIO_ENDPOINT_URL }}
          unzip -q main/YouTube.ipa -d main/tmp
          # Get the version number of the YouTube app and store it
          echo "YT_VERSION=$(grep -A 1 '<key>CFBundleVersion</key>' main/tmp/Payload/YouTube.app/Info.plist | grep '<string>' | awk -F'[><]' '{print $3}')" >> $GITHUB_ENV
          # Get the version number of the latest release
          wget -qO- https://github.com/dayanch96/YTLite/releases/latest > main/tmp/release_page.html
          YTLITE_VERSION=$(grep -o -E '/tag/v[^"]+' main/tmp/release_page.html | head -n 1 | sed 's/\/tag\/v//')
          echo "YTLITE_VERSION=5.0.1" >> $GITHUB_ENV
          echo $YTLITE_VERSION
          # Remove contents in the iPA that interfere with sideloading
          rm -rf main/tmp/Payload/YouTube.app/_CodeSignature/CodeResources
          rm -rf main/tmp/Payload/YouTube.app/PlugIns/*
          # Modify Info.plist to remove UISupportedDevices (Python script)
          python - <<EOF
          import plistlib
          def remove_uisupporteddevices(filepath):
              with open(filepath, 'rb') as f:
                  plist = plistlib.load(f)

              if 'UISupportedDevices' in plist:
                  del plist['UISupportedDevices']

              with open(filepath, 'wb') as f:
                  plistlib.dump(plist, f)

          filepath = 'main/tmp/Payload/YouTube.app/Info.plist'
          remove_uisupporteddevices(filepath)
          EOF
          # Manually install the Open in YouTube extension
          cp -R main/Extensions/*.appex main/tmp/Payload/YouTube.app/PlugIns
        env:
          THEOS: ${{ github.workspace }}/theos

      - name: Build Package
        id: build_package
        run: |
          cd ${{ github.workspace }}/main
          # Replace lines in Makefile based on inputs
          sed -i '' "s/^BUNDLE_ID.*$/BUNDLE_ID = ${{ env.BUNDLE_ID }}/" Makefile
          sed -i '' "s/^DISPLAY_NAME.*$/DISPLAY_NAME = ${{ env.APP_NAME }}/" Makefile
          sed -i '' "s/^PACKAGE_VERSION.*$/PACKAGE_VERSION = ${{ env.YT_VERSION }}-5.0.1/" Makefile
          sed -i '' "s/^export TARGET.*$/export TARGET = iphone:clang:${{ inputs.sdk_version }}:14.0/" Makefile
          sed -i '' "s/^export SDK_PATH.*$/export SDK_PATH = \$(THEOS)\/sdks\/iPhoneOS${{ inputs.sdk_version }}.sdk\//" Makefile
          # Build the package
          make package THEOS_PACKAGE_SCHEME=rootless FINALPACKAGE=1
          # Rename the package based on the version
          (mv "packages/$(ls -t packages | head -n1)" "packages/YTLitePlus_${{ env.YT_VERSION }}_5.0.1.ipa")
          # Pass package name to the upload step
          echo "package=$(ls -t packages | head -n1)" >> $GITHUB_OUTPUT
          # Print out the hash and bundle ID
          echo -e "==> \033[1mSHASUM256: $(shasum -a 256 packages/*.ipa | cut -f1 -d' ')\033[0m"
          echo -e "==> \033[1mBundle ID: ${{ env.BUNDLE_ID }}\033[0m"
        env:
          THEOS: ${{ github.workspace }}/theos
          BUNDLE_ID: ${{ inputs.bundle_id }}
          APP_NAME: ${{ inputs.app_name }}

      - name: Upload Artifact
        if: ${{ inputs.upload_artifact }}
        uses: actions/upload-artifact@v4
        with:
          name: YTLitePlus_${{ env.YT_VERSION }}_${{ env.YTLITE_VERSION }}
          path: ${{ github.workspace }}/main/packages/${{ steps.build_package.outputs.package }}
          if-no-files-found: error
          
      - name: Upload to MinIO S3
        if: ${{ inputs.upload_to_s3 }}
        run: |
          PACKAGE_NAME="${{ steps.build_package.outputs.package }}"
          S3_KEY="releases/YTLitePlus_${{ env.YT_VERSION }}_${{ env.YTLITE_VERSION }}/${PACKAGE_NAME}"
          
          aws s3 cp "${{ github.workspace }}/main/packages/${PACKAGE_NAME}" \
            "s3://${{ secrets.MINIO_BUCKET_NAME }}/${S3_KEY}" \
            --endpoint-url ${{ secrets.MINIO_ENDPOINT_URL }}
          
          # Generate public URL (adjust based on your MinIO setup)
          S3_URL="${{ secrets.MINIO_ENDPOINT_URL }}/${{ secrets.MINIO_BUCKET_NAME }}/${S3_KEY}"
          echo "S3_URL=$S3_URL" >> $GITHUB_ENV
          echo "Uploaded to MinIO S3: $S3_URL"

      - name: Job Summary
        run: |
          echo -e '### 📺 Build Complete' >> $GITHUB_STEP_SUMMARY

      - name: Job Summary - Artifact Upload
        if: ${{ inputs.upload_artifact }}
        run: |
          echo -e '### 📦 Artifact Upload\n\nThe artifact was uploaded successfully! Refresh and [scroll down](#artifacts) to view the artifact. Note that you must be signed in to GitHub to download it.' >> $GITHUB_STEP_SUMMARY

      - name: Job Summary - MinIO S3 Upload
        if: ${{ inputs.upload_to_s3 }}
        run: |
          echo -e '### 🗄️ MinIO S3 Upload\n\nThe upload to MinIO S3 was successful! File URL: '$S3_URL >> $GITHUB_STEP_SUMMARY

      - name: Job Summary - Link to remove GitHub Action runs
        run: |
          REPO_URL="https://github.com/${{ github.repository }}"
          DELETE_RUNS_URL="$REPO_URL/actions/workflows/delete-workflow-runs.yml"
          echo -e '### 🧹 Cleanup\n\nYou can remove previous GitHub Action runs here: '$DELETE_RUNS_URL >> $GITHUB_STEP_SUMMARY
